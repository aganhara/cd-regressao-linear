O nosso objetivo consiste em obter um modelo de ML baseado na regress√£o linear simples e univariada de
lstat e os valores medianos dos pre√ßos das casas medv. Abaixo, seguem os itens que devemos solucionar neste
desenvolvimento, visando alcan√ßar o objetivo deste exerc√≠cio:
 Quest√µes Avaliativas
library(MASS)
?Boston
data <- Boston
head(data)
library(MASS)
?Boston
data <- Boston
head(data)
data
data
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
?Boston
data <- Boston
data
data <- Boston
library(MASS)
?Boston
data <- Boston
data
data <- Boston
data
head(data)
head(data)
install.packages(c("backports", "broom", "callr", "car", "carData", "dbplyr", "dplyr", "ellipsis", "foreach", "forecast", "fs", "ggplot2", "glue", "haven", "httpuv", "isoband", "janitor", "later", "lme4", "lubridate", "maptools", "modelr", "openxlsx", "padr", "pillar", "pkgbuild", "pkgload", "plotly", "pROC", "promises", "ps", "purrr", "quantmod", "Rcpp", "RcppArmadillo", "recipes", "reshape2", "rlang", "rmarkdown", "scales", "seasonal", "shinyWidgets", "sp", "SQUAREM", "tibble", "tibbletime", "tidyr", "tidyselect", "timetk", "tinytex", "tripack", "vctrs", "withr", "xfun", "xml2", "zoo"))
knitr::opts_chunk$set(echo = TRUE)
data <- Boston
library(MASS)
?Boston
data <- Boston
head(data)
library(MASS)
?Boston
data <- Boston
head(data)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
?Boston
data <- Boston
head(data)
library(MASS)
?Boston
data <- Boston
head(data)
library(MASS)
?Boston
data <- Boston
head(data)
library(MASS)
?Boston
data <- Boston
head(data)
library(MASS)
?Boston
data <- Boston
head(data)
library(MASS)
?Boston
data <- Boston
head(data)
library(MASS)
?Boston
data <- Boston
head(data)
library(MASS)
?Boston
data <- Boston
head(data)
library(MASS)
?Boston
data <- Boston
head(data)
library(MASS)
?Boston
data <- Boston
head(data)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
?Boston
data <- Boston
head(data)
library(MASS)
?Boston
data <- Boston
head(data)
library(MASS)
?Boston
data <- Boston
head(data)
library(MASS)
?Boston
data <- Boston
head(data)
knitr::opts_chunk$set(echo = TRUE)
plot(cars)
library(MASS)
?Boston
summary(Boston)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
# Utiliza fun√ß√µes gr√°ficas simples para verificar a rela√ß√£o entre vari√°veis:
# ?plot
plot(data$lstat, data$medv, main = 'Gr√°fico de Dispers√£o - lstat vs medv',
xlab = 'lstat', ylab = 'Pre√ßo mediano da casa', pch = 1, col = 'blue')
# ?legend
legend("topright",legend = c('Dados'), col = c('blue'), pch = c(1))
# ?grid
grid()
modelo_ML <- lm(medv ~ lstat, data)
x <- data$lstat
y <- data$medv
summary(modelo_ML)
# Coeficientes
modelo_ML$coefficients[1]
modelo_ML$coefficients[2]
# Res√≠duos do modelo (diferen√ßa entre o modelo e os dados de treinamento)
modelo_ML$residuals
# Obtenha a m√©dia dos res√≠duos
media_residuos = mean(modelo_ML$residuals)
media_residuos
previsao_treinamento <- predict(modelo_ML) %>% as.data.frame()
library(MASS)
library(rlang)
library(tidyverse)
install.packages(rlang)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(rlang)
library(tidyverse)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(rlang)
library(tidyverse)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
saveRDS(df,'C:\Users\aganh\Documents\Ci√™ncia de dados e decis√£o\Exerc√≠cios computacionais\cd-regressao-linear\.RData')
saveRDS(df,'C:\\Users\\aganh\\Documents\\Ci√™ncia de dados e decis√£o\\Exerc√≠cios computacionais\\cd-regressao-linear\\.RData')
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(rlang)
library(tidyverse)
install.packages("vctrs")
library(tidyverse)
library(tidyselect)
install.packages("tidyselect")
install.packages("tidyselect")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
install.packages("tibble")
install.packages("tibble")
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(rlang)
library(tidyverse)
data <- Boston
summary(data)
library(MASS)
library(rlang)
library(tidyverse)
data <- Boston
summary(data)
```{r}
# Utiliza fun√ß√µes gr√°ficas simples para verificar a rela√ß√£o entre vari√°veis:
# ?plot
plot(data$lstat, data$medv, main = 'Gr√°fico de Dispers√£o - lstat vs medv',
xlab = 'lstat', ylab = 'Pre√ßo mediano da casa', pch = 1, col = 'blue')
# ?legend
legend("topright",legend = c('Dados'), col = c('blue'), pch = c(1))
# ?grid
grid()
# Utiliza fun√ß√µes gr√°ficas simples para verificar a rela√ß√£o entre vari√°veis:
# ?plot
plot(data$lstat, data$medv, main = 'Gr√°fico de Dispers√£o - lstat vs medv',
xlab = 'lstat', ylab = 'Pre√ßo mediano da casa', pch = 1, col = 'blue')
# ?legend
legend("topright",legend = c('Dados'), col = c('blue'), pch = c(1))
# ?grid
grid()
modelo_ML <- lm(medv ~ lstat, data)
x <- data$lstat
y <- data$medv
summary(modelo_ML)
# Coeficientes
modelo_ML$coefficients[1]
modelo_ML$coefficients[2]
# Res√≠duos do modelo (diferen√ßa entre o modelo e os dados de treinamento)
modelo_ML$residuals
# Obtenha a m√©dia dos res√≠duos
media_residuos = mean(modelo_ML$residuals)
media_residuos
previsao_treinamento <- predict(modelo_ML) %>% as.data.frame()
names(previsao_treinamento)
previsao_treinamento
previsao_treinamento <- predict(modelo_ML) %>% as.data.frame()
# Modelo de regress√£o
h = modelo_ML$coefficients[1] + modelo_ML$coefficients[2]*x
# Visualiza√ß√£o
ggplot(data,
aes(x = lstat, y = medv)) +
geom_point(size=3, aes(colour = "Dados de Treinamento")) +
geom_line(aes(x = x, y = h, colour = "Modelo de Regress√£o"),linetype = 1, size=1.5) +
scale_colour_manual(name="Legenda", values=c("blue", "red")) +
xlab('Popula√ß√£o (baseada em 10.000)') + ylab('Lucro (baseado em $10.000)')  +
ggtitle("Gr√°fico de Dispers√£o - Popula√ß√£o vs Lucro")
# ===============================================================================================
# Predi√ß√£o do Modelo para novos dados ------------------------------------------------------
# Novo valor de popula√ß√£o (10 mil habitantes) - n√≥s n√£o sabemos a previsibilidade para esse valor de entrada
novo_dado      = data.frame(c(10, 15, 20, 25, 30, 35))
colnames(novo_dado) <- c('lstat')
novo_dado
predicao_teste <- predict(modelo_ML, novo_dado)
predicao_teste <- data.frame(predicao_teste*1000)
names(predicao_teste) <- c('Predi√ß√µes (d√≥lares)')
predicao_teste
predicao_teste
predicao_teste
predicao_teste
# Novo valor de popula√ß√£o (10 mil habitantes) - n√≥s n√£o sabemos a previsibilidade para esse valor de entrada
novo_dado      = data.frame(c(10, 15, 20, 25, 30, 35))
colnames(novo_dado) <- c('lstat')
novo_dado
predicao_teste <- predict(modelo_ML, novo_dado)
predicao_teste <- data.frame(predicao_teste*1000)
names(predicao_teste) <- c('Predi√ß√µes (d√≥lares)')
predicao_teste
# Novo valor de popula√ß√£o (10 mil habitantes) - n√≥s n√£o sabemos a previsibilidade para esse valor de entrada
novo_dado      = data.frame(c(10, 15, 20, 25, 30, 35))
colnames(novo_dado) <- c('lstat')
novo_dado
predicao_teste <- predict(modelo_ML, novo_dado)
predicao_teste <- data.frame(predicao_teste*1000)
names(predicao_teste) <- c('Predi√ß√µes (d√≥lares)')
predicao_teste
# ===============================================================================================
# Predi√ß√£o do Modelo para novos dados ------------------------------------------------------
# Novo valor de popula√ß√£o (10 mil habitantes) - n√≥s n√£o sabemos a previsibilidade para esse valor de entrada
novo_dado      = data.frame(c(10, 15, 20, 25, 30, 35))
colnames(novo_dado) <- c('lstat')
novo_dado
predicao_teste <- predict(modelo_ML, novo_dado)
predicao_teste <- data.frame(predicao_teste*1000)
names(predicao_teste) <- c('Predi√ß√µes (d√≥lares)')
predicao_teste
# ===============================================================================================
# Predi√ß√£o do Modelo para novos dados ------------------------------------------------------
# Novo valor de popula√ß√£o (10 mil habitantes) - n√≥s n√£o sabemos a previsibilidade para esse valor de entrada
novo_dado      = data.frame(c(10, 15, 20, 25, 30, 35))
colnames(novo_dado) <- c('lstat')
novo_dado
predicao_teste <- predict(modelo_ML, novo_dado)
predicao_teste <- data.frame(predicao_teste*1000)
names(predicao_teste) <- c('Predi√ß√µes (d√≥lares)')
predicao_teste
predicao_teste
predicao_teste
```{r}
# ===============================================================================================
# Predi√ß√£o do Modelo para novos dados ------------------------------------------------------
# Novo valor de popula√ß√£o (10 mil habitantes) - n√≥s n√£o sabemos a previsibilidade para esse valor de entrada
novo_dado      = data.frame(c(10, 15, 20, 25, 30, 35))
colnames(novo_dado) <- c('lstat')
novo_dado
predicao_teste <- predict(modelo_ML, novo_dado)
predicao_teste <- data.frame(predicao_teste*1000)
names(predicao_teste) <- c('Predi√ß√µes (d√≥lares)')
predicao_teste
predicao_teste
# ===============================================================================================
# Predi√ß√£o do Modelo para novos dados ------------------------------------------------------
# Novo valor de popula√ß√£o (10 mil habitantes) - n√≥s n√£o sabemos a previsibilidade para esse valor de entrada
novo_dado      = data.frame(c(10, 15, 20, 25, 30, 35))
colnames(novo_dado) <- c('lstat')
novo_dado
predicao_teste <- predict(modelo_ML, novo_dado)
predicao_teste <- data.frame(novo_dado, predicao_teste*1000)
names(predicao_teste) <- c('Predi√ß√µes (d√≥lares)')
predicao_teste
predicao_teste
# ===============================================================================================
# Predi√ß√£o do Modelo para novos dados ------------------------------------------------------
# Novo valor de popula√ß√£o (10 mil habitantes) - n√≥s n√£o sabemos a previsibilidade para esse valor de entrada
novo_dado      = data.frame(c(10, 15, 20, 25, 30, 35))
colnames(novo_dado) <- c('lstat')
novo_dado
predicao_teste <- predict(modelo_ML, novo_dado)
predicao_teste <- data.frame(novo_dado, predicao_teste*1000)
names(predicao_teste) <- c('Porcentagem Baixa renda', 'Predi√ß√µes (d√≥lares)')
predicao_teste
predicao_teste
# ------------------------------------------------------------------------------------------------------
# Implementa√ß√£o do algoritmo do gradiente descendente para obten√ß√£o do mesmo resultado da fun√ß√£o lm do R
theta0 = 0
theta1 = 0
theta  = c(theta0,theta1)
# Criando fun√ß√µes
Cost_computation <- function(x, y, theta){
# Verifica√ß√£o do n√∫mero de exemplos de treinamento
m = length(y)
# Inicializa√ß√£o do Custo
J = 0
# C√¥mputo do custo a partir das informa√ß√µes fornecidas:
# i)   matriz de design
# ii)  r√≥tulos ou respostas
# iii) par√¢metros inicializados
# Par√¢metros - de acordo com o modelo de regress√£o linear
Theta0 = theta[1]
Theta1 = theta[2]
# Fun√ß√£o hip√≥tese candidata de acordo com o modelo linear
h = Theta0 + Theta1*x
# C√¥mputo do custo (repare na vers√£o vetorizada com Matlab)
Cost = sum((h - y)^2)
# Pondera√ß√£o do custo pela quantidade de exemplos de treinamento
J = (1/(2*m))*Cost
}
# C√°lculo da fun√ß√£o custo para esses valores do vetor de par√¢metros theta
Custo = Cost_computation(x,y,theta)
Custo
# ------------------------------------------------------------------------------------------------------
# Implementa√ß√£o do algoritmo do gradiente descendente para obten√ß√£o do mesmo resultado da fun√ß√£o lm do R
theta0 = 0
theta1 = 0
theta  = c(theta0,theta1)
# Criando fun√ß√µes
Cost_computation <- function(x, y, theta){
# Verifica√ß√£o do n√∫mero de exemplos de treinamento
m = length(y)
# Inicializa√ß√£o do Custo
J = 0
# C√¥mputo do custo a partir das informa√ß√µes fornecidas:
# i)   matriz de design
# ii)  r√≥tulos ou respostas
# iii) par√¢metros inicializados
# Par√¢metros - de acordo com o modelo de regress√£o linear
Theta0 = theta[1]
Theta1 = theta[2]
# Fun√ß√£o hip√≥tese candidata de acordo com o modelo linear
h = Theta0 + Theta1*x
# C√¥mputo do custo (repare na vers√£o vetorizada com Matlab)
Cost = sum((h - y)^2)
# Pondera√ß√£o do custo pela quantidade de exemplos de treinamento
J = (1/(2*m))*Cost
}
# C√°lculo da fun√ß√£o custo para esses valores do vetor de par√¢metros theta
Custo = Cost_computation(x,y,theta)
Custo
# -----------------------------------------------------------------------------------------------
# Algoritmo do Gradiente Descendente ------------------------------------------------------------
# Inicializa√ß√µes relacionada ao gradiente descendente
num_iters     = 50000;
learning_rate = 0.001;
Algoritmo_GD <- function(X, y, theta, learning_rate, num_iters){
# Verifica√ß√£o do n√∫mero de exemplos de treinamento
m = length(y)
# Uso da vari√°vel alpha = taxa de aprendizagem
alpha = learning_rate
# Loop para itera√ß√µes do algoritmo GD
for (i in 1:num_iters){
# ================================================================================
h      = theta[1] + theta[2]*x                   # Fun√ß√£o hip√≥tese
Theta0 = theta[1]                                # Par√¢metro (bias)
Theta1 = theta[2]                                # Par√¢metro da caracter√≠stica
Theta0 = Theta0 - alpha*(1/m)*sum((h - y))       # Algoritmo GD (theta 0)
Theta1 = Theta1 - alpha*(1/m)*sum((h - y)*x)     # Algoritmo GD (theta 1)
theta  = c(Theta0, Theta1)                       # Composi√ß√£o de vetor de par√¢metro
# print(theta)
}
# ================================================================================
theta
}
theta_GD <- Algoritmo_GD(x, y, theta, learning_rate, num_iters)
theta_GD
# ===============================================================================================
# Uso das equa√ß√µes normais para solu√ß√£o da regress√£o linear simples
# Repare que n√≥s usamos a matriz de design com a caracter√≠stica unit√°ria,
# pois queremos encontrar o par√¢metro theta_0 ou intercept do modelo
# Caracter√≠stica unit√°ria
size_data = dim(data)
ones_data = replicate(size_data[1],1)
# Matriz de Design
X = data.frame(ones_data,x)
X = as.matrix(X)
View(X)
theta_solution_norm_equations = solve(t(X) %*% X) %*% (t(X) %*% y)
theta_0_norm_eq = theta_solution_norm_equations[1]
theta_1_norm_eq = theta_solution_norm_equations[2]
theta_0_norm_eq
theta_1_norm_eq
# ===============================================================================================
# Descri√ß√£o detalhada do summary do modelo ------------------------------------------------------
# Summary do modelo - avaliando sua performance e detalhes
summary(modelo_ML)
# Res√≠duos
# Diferen√ßa entre os valores observados de uma vari√°vel e suas predi√ß√µes
# Coeficiente - Intercept - a (alfa)
# Valor de a na equa√ß√£o de regress√£o
# Coeficientes - Nomes das vari√°veis - b (beta)
# Valor de b na equa√ß√£o de regress√£o
# Asteriscos
# Os asteriscos representam os n√≠veis de signific√¢ncia de acordo com o p-value para cara vari√°vel explorat√≥ria.
# Quanto mais estrelas, maior a signific√¢ncia.
# Valor t
# Ele √© usado para calcular o p-value e os n√≠veis de signific√¢ncia.
# p-value
# O p-value representa a probabilidade que a vari√°vel n√£o seja relevante.
# Deve ser o menor valor poss√≠vel.
# R-squared (coeficiente de determina√ß√£o - R^2)
# Ajuda a avaliar a precis√£o explicativa do modelo.
# Quanto maior, melhor, sendo 1 o valor ideal.
# Lembre-se que correla√ß√£o n√£o implica causalidade
data <- Boston
source('~/.active-rstudio-document', echo=TRUE)
modelo_ML <- lm(medv ~ crim + rm + lstat)
modelo_ML <- lm(medv ~ crim + rm + lstat, data = data)
summary(modelo_ML)
previsao_treinamento <- predict(modelo_ML)
previsao_treinamento
names(previsao_treinamento)
summary(previsao_treinamento)
names(modelo_ML)
summary(modelo_ML)
names(modelo_ML)
summary(modelo_ML)
modelo_ML$coefficients
# Coeficientes
modelo_ML$coefficients[1]
modelo_ML$coefficients[2]
modelo_ML$residuals
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
previsao_treinamento
previsao_treinamento <- predict(modelo_ML) %>% as.data.frame()
previsao_treinamento
x <- data$crim
x_1 <- data$rm
x_2 <- data$lstat
y <- data$medv
h = modelo_ML$coefficients[1] + modelo_ML$coefficients[2]*x + modelo_ML$coefficients[3]*x_1 + modelo_ML$coefficients[4]+x_2
# Novo valor de popula√ß√£o (10 mil habitantes) - n√≥s n√£o sabemos a previsibilidade para esse valor de entrada
novo_dado      = data.frame(crim = c(0.15), rm = c(5), lstat = c(20))
#colnames(novo_dado) <- c('lstat')
novo_dado
predicao_teste <- predict(modelo_ML, novo_dado)
#predicao_teste <- data.frame(novo_dado, predicao_teste*1000)
#names(predicao_teste) <- c('Porcentagem Baixa renda', 'Predi√ß√µes (d√≥lares)')
predicao_teste
predicao_teste <- data.frame(predict = predict(modelo_ML, novo_dado))
#predicao_teste <- data.frame(novo_dado, predicao_teste*1000)
#names(predicao_teste) <- c('Porcentagem Baixa renda', 'Predi√ß√µes (d√≥lares)')
predicao_teste
predicao_teste <- data.frame("Predi√ß√£o em dolares" = predict(modelo_ML, novo_dado))
#predicao_teste <- data.frame(novo_dado, predicao_teste*1000)
#names(predicao_teste) <- c('Porcentagem Baixa renda', 'Predi√ß√µes (d√≥lares)')
predicao_teste
predicao_teste <- predict(modelo_ML, novo_dado)
predicao_teste <- data.frame(predicao_teste*1000)
names(predicao_teste) <- c('Predi√ß√µes (d√≥lares)')
predicao_teste
predicao_teste <- data.frame(novo_dado, predicao_teste*1000)
#names(predicao_teste) <- c('Predi√ß√µes (d√≥lares)')
predicao_teste
predicao_teste <- predict(modelo_ML, novo_dado)
predicao_teste <- data.frame(novo_dado, predicao_teste*1000)
names(predicao_teste) <- c('√çndice de crimes', 'N√∫mero de quartos', 'Porcetagem Baixa Renda', 'Predi√ß√µes (d√≥lares)')
predicao_teste
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
data <- Boston
data
modelo_ML <- lm(medv ~ crim + rm + lstat, data = data)
summary(modelo_ML)
previsao_treinamento <- predict(modelo_ML) %>% as.data.frame()
previsao_treinamento
names(modelo_ML)
modelo_ML$coefficients
modelo_ML$residuals
modelo_ML$residuals
x <- data$crim
x_1 <- data$rm
x_2 <- data$lstat
y <- data$medv
h = modelo_ML$coefficients[1] + modelo_ML$coefficients[2]*x + modelo_ML$coefficients[3]*x_1 + modelo_ML$coefficients[4]+x_2
# Novo valor de popula√ß√£o (10 mil habitantes) - n√≥s n√£o sabemos a previsibilidade para esse valor de entrada
novo_dado      = data.frame(crim = c(0.15), rm = c(5), lstat = c(20))
#colnames(novo_dado) <- c('lstat')
novo_dado
predicao_teste <- predict(modelo_ML, novo_dado)
predicao_teste <- data.frame(novo_dado, predicao_teste*1000)
names(predicao_teste) <- c('√çndice de crimes', 'N√∫mero de quartos', 'Porcetagem Baixa Renda', 'Predi√ß√µes (d√≥lares)')
predicao_teste
predicao_teste
modelo_ML$coefficients
h
modelo_ML
names(modelo_ML)
modelo_ML$model
